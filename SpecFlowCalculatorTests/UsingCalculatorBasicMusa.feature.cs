// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowCalculatorTests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UsingCalculatorBasicMusa")]
    public partial class UsingCalculatorBasicMusaFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UsingCalculatorBasicMusa.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "UsingCalculatorBasicMusa", "  In order to calculate the Basic Musa model\'s failure intensities and expected f" +
                    "ailures\n  As a Software Quality Metric enthusiast\n  I want to use my calculator " +
                    "to do this", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating current failure intensity using the Basic Musa model")]
        [NUnit.Framework.CategoryAttribute("FailureIntensity")]
        [NUnit.Framework.TestCaseAttribute("1000", "2000", "1000", "500", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "1000", "0", "1000", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "1000", "1000", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "2000", "0", "1000", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "2000", "1999", "0.5", null)]
        public async System.Threading.Tasks.Task CalculatingCurrentFailureIntensityUsingTheBasicMusaModel(string initialFailureIntensity, string totalFailures, string expectedFailures, string expectedResult, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "FailureIntensity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("initialFailureIntensity", initialFailureIntensity);
            argumentsOfScenario.Add("totalFailures", totalFailures);
            argumentsOfScenario.Add("expectedFailures", expectedFailures);
            argumentsOfScenario.Add("expectedResult", expectedResult);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Calculating current failure intensity using the Basic Musa model", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.WhenAsync(string.Format("I have entered {0} as the initial failure intensity (λ₀), {1} as the total number" +
                            " of failures (ν₀), and {2} as the average number of expected failures (μ(τ)) int" +
                            "o the calculator", initialFailureIntensity, totalFailures, expectedFailures), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
    await testRunner.ThenAsync(string.Format("the current failure intensity result should be \"{0}\"", expectedResult), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating the average number of expected failures using the Basic Musa model")]
        [NUnit.Framework.CategoryAttribute("ExpectedFailures")]
        [NUnit.Framework.TestCaseAttribute("2000", "1000", "15", "1998.8938", null)]
        [NUnit.Framework.TestCaseAttribute("2000", "1000", "100", "2000", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "1000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "1000", "10", "999.9546", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "500", "5", "917.915", null)]
        [NUnit.Framework.TestCaseAttribute("500", "1000", "5", "499.9773", null)]
        public async System.Threading.Tasks.Task CalculatingTheAverageNumberOfExpectedFailuresUsingTheBasicMusaModel(string totalFailures, string initialFailureIntensity, string time, string expectedResult, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExpectedFailures"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("totalFailures", totalFailures);
            argumentsOfScenario.Add("initialFailureIntensity", initialFailureIntensity);
            argumentsOfScenario.Add("time", time);
            argumentsOfScenario.Add("expectedResult", expectedResult);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Calculating the average number of expected failures using the Basic Musa model", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 22
    await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 23
    await testRunner.WhenAsync(string.Format("I have entered {0} as the total number of failures (ν₀), {1} as the initial failu" +
                            "re intensity (λ₀), and {2} as the time (τ) into the calculator", totalFailures, initialFailureIntensity, time), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
    await testRunner.ThenAsync(string.Format("the average number of expected failures result should be \"{0}\"", expectedResult), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
