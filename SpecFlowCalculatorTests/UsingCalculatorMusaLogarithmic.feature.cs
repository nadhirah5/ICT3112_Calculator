// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowCalculatorTests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UsingCalculatorMusaLogarithmic")]
    public partial class UsingCalculatorMusaLogarithmicFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UsingCalculatorMusaLogarithmic.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "UsingCalculatorMusaLogarithmic", @"User Story 3 - Failure Intensity Calculation using Musa Logarithmic Model: 
As a system quality engineer, 
I want to calculate the failure intensity using the Musa Logarithmic model 
so that I can predict the failure rate based on system reliability and operational time.

Acceptance Criteria:

The calculator should accept inputs for initial failure intensity, execution time, and the number of failures experienced.
The output should provide the failure intensity based on the Musa model.

User Story 4 - Expected Failures Calculation using Musa Logarithmic Model: 
As a system quality engineer, 
I want to calculate the expected number of failures over a given time period using the Musa Logarithmic model 
so that I can estimate the system’s reliability over time.

Acceptance Criteria:

The calculator should accept inputs for operational time and system parameters.
The output should provide the expected number of failures based on the Musa model.
A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating Current Failure Intensity Using Musa Logarithmic model")]
        [NUnit.Framework.CategoryAttribute("Reliability")]
        [NUnit.Framework.TestCaseAttribute("10", "0.02", "50", "3.68", null)]
        public async System.Threading.Tasks.Task CalculatingCurrentFailureIntensityUsingMusaLogarithmicModel(string value1, string value2, string value3, string value4, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Reliability"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("value1", value1);
            argumentsOfScenario.Add("value2", value2);
            argumentsOfScenario.Add("value3", value3);
            argumentsOfScenario.Add("value4", value4);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Calculating Current Failure Intensity Using Musa Logarithmic model", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 26
 await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 27
 await testRunner.WhenAsync(string.Format("I have entered {0} failures/CPU-hour and {1} failure intensity decay and {2} fail" +
                            "ures experienced currently into the calculator and press CFI_LOG", value1, value2, value3), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
 await testRunner.ThenAsync(string.Format("the current failure log intensity result should be {0} /CPU-hour", value4), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate Expected Failures Using Musa Logarithmic model")]
        [NUnit.Framework.CategoryAttribute("Reliability")]
        [NUnit.Framework.TestCaseAttribute("10", "0.02", "10", "55", null)]
        [NUnit.Framework.TestCaseAttribute("10", "0.02", "100", "152", null)]
        [NUnit.Framework.TestCaseAttribute("10", "0", "10", "positive_infinity", null)]
        [NUnit.Framework.TestCaseAttribute("0", "2", "10", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "0", "0", null)]
        public async System.Threading.Tasks.Task CalculateExpectedFailuresUsingMusaLogarithmicModel(string value1, string value2, string value3, string value4, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Reliability"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("value1", value1);
            argumentsOfScenario.Add("value2", value2);
            argumentsOfScenario.Add("value3", value3);
            argumentsOfScenario.Add("value4", value4);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Calculate Expected Failures Using Musa Logarithmic model", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
 await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 38
 await testRunner.WhenAsync(string.Format("I have entered {0} intitial failure intensity and {1} failure intensity decay and" +
                            " {2} CPU-hours into the calculator and press AEF_LOG", value1, value2, value3), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
 await testRunner.ThenAsync(string.Format("the average number of failures should be {0} failures", value4), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
